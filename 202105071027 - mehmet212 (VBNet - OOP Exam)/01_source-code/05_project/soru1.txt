Encapsulation (Kapsulleme)>>
	Bir veya daha fazla öğeyi fiziksel veya mantıksal bir paket içinde gizleme işlemi’ olarak tanımlanır.
	Nesneye yönelik programlama dillerinin temel felsefesidir.

	
		Public Class Kare
	        Private kenar As Integer
	        Public Property KenarUzunluk() As Integer
	            Get
	                KenarUzunluk = kenar
	            End Get
	            Set(value As Integer)
	                If (value < 0 Then
	                    Console.WriteLine("Kenar 0 dan kucuk olamaz")
	                    Return
	                End If
	                kenar = value
	            End Set
	        End Property
    	End Class

    Bu kodda Kare isminde bir sınıf oluşturulmuştur. Oluşturulan bu sınıfın kenar isminde bir özelliği vardır.
    kenar özelliği doğrudan erişime kapalıdır.
    Get ve Set methodları tanımlanarak kenar özelliğinin değerinin okunması ve değiştirilmesi sağlanmıştır.
    Set işlemi sırasında gelen değerin 0 dan küçük olma durumu kontrolü sağlanmıştır.
    Yapılan bu işlem ardından kenar özelliği kapsüllenmiştir.


Abstraction (Soyutlama) >>
	Soyutlama, nesneye yalnızca ilgili ayrıntıları göstermek için daha büyük bir havuzdan veri seçmektir.
	Programlama karmaşıklığını ve çabayı azaltmaya yardımcı olur. Java’da soyutlama soyut sınıflar ve arayüzler kullanılarak gerçekleştirilir.
	OOP’ların en önemli kavramlarından biridir.

	Public MustInherit Class A
		Protected StartDate As Date
		Protected Men As Integer
		Protected Place As String

		Public Sub New()
			StartDate = Today
			Men = 0
			Place = ""
		End Sub

	End Class

	Public Class B
		Inherits A

		Public Grade As String

		Public Sub New()
			MyBase.New()
			Grade = "Easy"
		End Sub

		Public Sub SetGrade(ByVal grade As String)
			Me.Grade = grade
		End Sub
	End Class

	A sınıfı soyut bir sınıftır.
	Tek başına işlevi yoktur kendisini kalıtım alan sınıflar için şablon görevi görür


Polymorphism (Cok bicimlilik)>>
	Polymorphism, “Çokbiçimlilik” anlamına gelen Yunanca bir kelimedir.
	Başka bir deyişle, bir nesnenin birçok işlevi vardır, veya birden çok işlevi olan bir adı vardır.
	“Poli” çok, “morph” ise form anlamına gelir.
	Polimorfizm, bir sınıfa aynı isimde çoklu uygulamalar yapabilme özelliği sağlar.
	Kapsülleme ve kalıtım sonrası Nesneye Yönelik Programlamanın temel ilkelerinden biridir. 

	Public Class OrnekSinif
        Public Function Toplama(ByVal a As Integer, ByVal b As Integer) As Integer
            Return a + b
        End Function

        Public Function Toplama(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Integer
            Return a + b + c
        End Function
    End Class

	OrnekSinif icierisinde ayni isimde iki adet fakat farkli parametrelere sahip fonsiyonlar(overloading) tanımlanmıştır
	Derleyici iletilen parametrelere göre hangi fonksiyonun çağrılacağına karar verir.
	Sonuç olarak bir nesnenin işlemi farklı şekillerde yapabileceği görülmüştür.
	


Inheritance (Kalitim)>>

	Public Class Kare
        Public Property kenar As Integer

        Public Sub New()
            Console.WriteLine("Yeni nesne turetildi (Kare)")
        End Sub
        Public Sub New(ByVal _kenar As Integer)
            kenar = _kenar
            Console.WriteLine("Parametreli yeni nesne turetildi (Kare)")
        End Sub

        Protected Overrides Sub Finalize()
            Console.WriteLine("Nesne yokedildi (Kare)")
        End Sub

        Public Overridable Function Alan() As Integer
            Return kenar * kenar
        End Function

        Public Overridable Function Cevre() As Integer
            Return kenar * 4
        End Function

	End Class

	Public Class Kup
        Inherits Kare

        Public Sub New()
            Console.WriteLine("Yeni nesne turetildi (Kup)")
        End Sub
        Public Sub New(ByVal _kenar As Kup sınıfı Kare sınıfından kalıtım almıştır.

        End Function

        Public Overrides Function Cevre() As Integer
            Return 3 * (MyBase.Cevre())
        End Function

        Public Function Hacim() As Integer
            Return kenar * (MyBase.Alan())
        End Function

	End Class

	Kup sınıfı Kare sınıfından kalıtım almıştır.
	Kare sınıfının özelliklerine ve methodlarına erişimi bulunur
